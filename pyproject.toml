[tool.poetry]
name = "mrio"
version = "0.1.3"
description = "Python Package that support the read/write of multidimensional COG files"
authors = ["Cesar Aybar <cesar.aybar@uv.es>", "Julio Contreras <julio.contreras@uv.es>"]
repository = "https://github.com/tacofoundation/mrio-python"
documentation = "https://tacofoundation.github.io/mrio/"
readme = "README.md"
packages = [
  {include = "mrio"}
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
rasterio = ">=1.4.3"
einops = ">=0.8.0"
typing-extensions = ">=4.12.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
mypy = "^1.5.1"
pytest-cov = ">=4.0.0"
pre-commit = "^3.4.0"
tox = "^4.11.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = ["mrio"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"


[tool.coverage.run]
source = ["mrio"]
omit = ["__init__.py"]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]


[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # ShadowingBuiltins
    "A001",
    # DoNotPreventCache
    "B019",
]

[tool.ruff.format]
preview = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
